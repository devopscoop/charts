# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Example initContainer
#initContainers:
#  - name: copy-keyfiles
#    image: "amazon/aws-cli:2.17.29"
#    command: ['sh', '-c', "aws s3 cp --recursive s3://keyfiles-nebrazkp-us-east-2/upa-v1.2-sepolia ."]

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


##### ADDITIONS ######
## Environment variables
# NOTE: These have to be strings, even numbers, have to be strings! Helm is weird.
# env:
#   - name: EVANS_RULES
#     value: "1"

# You shouldn't actually put secrets in the main values.yaml file. You should
# pull them all out and put them in a separate file like secrets.values.yaml
# and use sops to encrypt them.
#
# The deployment file uses the secret keys to reference kubernetes secrets, but the values must be encrypted and will be turned into a k8s secret
# - secrets.yaml actually create the kubernetes secret using the values
# - deployments.yaml only references the keys in order to reference the k8s secrets
#secrets:
#  ADMIN_TOKEN: kjhfkjgahsdug
#  PASSWORD: kfj09u039jh
#  AWS_ACCESS_SECRETS_AND_SUCH: asjkldnkasghd9
